name: Build ReflexEngine

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      specific_distro:
        description: 'Build only a specific distribution (leave empty for all)'
        required: false
        default: ''

jobs:
  build-linux-distros:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro: [debian, arch, alpine]
    steps:
      - uses: actions/checkout@v4
      
      - name: Debug build information
        run: |
          echo "Building for ${{ matrix.distro }}"
          echo "Specific distro parameter: '${{ github.event.inputs.specific_distro }}'"
      
      - name: Install dependencies for ${{ matrix.distro }}
        run: |
          if [ "${{ matrix.distro }}" = "debian" ]; then
            sudo apt-get update
            sudo apt-get install -y build-essential gcc make lua5.4 liblua5.4-dev libuv1-dev
          elif [ "${{ matrix.distro }}" = "arch" ]; then
            # Docker container for arch could be used here
            # For GitHub runner, we'll install similar packages via apt
            sudo apt-get update
            sudo apt-get install -y build-essential gcc make lua5.4 liblua5.4-dev libuv1-dev
          elif [ "${{ matrix.distro }}" = "alpine" ]; then
            # Similar approach for alpine
            sudo apt-get update
            sudo apt-get install -y build-essential gcc make lua5.4 liblua5.4-dev libuv1-dev
          fi
      
      - name: Run configure script for ${{ matrix.distro }}
        run: |
          chmod +x ./configure.sh
          ./configure.sh ${{ matrix.distro }}
      
      - name: Build for ${{ matrix.distro }}
        run: make ${{ matrix.distro }}
        if: ${{ github.event.inputs.specific_distro == '' || github.event.inputs.specific_distro == matrix.distro }}
      
      - name: Upload ${{ matrix.distro }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: reflex-${{ matrix.distro }}
          path: binout/reflex-${{ matrix.distro }}
        if: ${{ github.event.inputs.specific_distro == '' || github.event.inputs.specific_distro == matrix.distro }}

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          brew update
          brew install lua libuv
      
      - name: Run configure script
        run: |
          chmod +x ./configure.sh
          ./configure.sh macos
      
      - name: Build for macOS
        run: make macos
        if: ${{ github.event.inputs.specific_distro == '' || github.event.inputs.specific_distro == 'macos' }}
      
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: reflex-macos
          path: binout/reflex-macos
        if: ${{ github.event.inputs.specific_distro == '' || github.event.inputs.specific_distro == 'macos' }}

  create-release-archive:
    needs: [build-linux-distros, build-macos]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      
      - name: Create version number
        id: version
        run: |
          echo "VERSION=$(date +'%Y.%m.%d')_$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./binout
      
      - name: Create distribution structure
        run: |
          mkdir -p release/ReflexEngine-${{ steps.version.outputs.VERSION }}
          cp -r ./README.md ./LICENSE ./src release/ReflexEngine-${{ steps.version.outputs.VERSION }}/
          mkdir -p release/ReflexEngine-${{ steps.version.outputs.VERSION }}/bin
          
          # Debug artifact structure
          find ./binout -type f | sort
          
          # Copy binaries using correct path patterns from the Makefile
          cp ./binout/reflex-debian/reflex-debian release/ReflexEngine-${{ steps.version.outputs.VERSION }}/bin/reflex-debian || echo "Warning: debian build not found"
          cp ./binout/reflex-arch/reflex-arch release/ReflexEngine-${{ steps.version.outputs.VERSION }}/bin/reflex-arch || echo "Warning: arch build not found"
          cp ./binout/reflex-alpine/reflex-alpine release/ReflexEngine-${{ steps.version.outputs.VERSION }}/bin/reflex-alpine || echo "Warning: alpine build not found"
          cp ./binout/reflex-macos/reflex-macos release/ReflexEngine-${{ steps.version.outputs.VERSION }}/bin/reflex-macos || echo "Warning: macos build not found"
          
          # Create archive files
          cd release && tar -czvf ReflexEngine-${{ steps.version.outputs.VERSION }}.tar.gz ReflexEngine-${{ steps.version.outputs.VERSION }}
          cd release && zip -r ReflexEngine-${{ steps.version.outputs.VERSION }}.zip ReflexEngine-${{ steps.version.outputs.VERSION }}
      
      - name: Upload release archive
        uses: actions/upload-artifact@v4
        with:
          name: ReflexEngine-${{ steps.version.outputs.VERSION }}
          path: |
            release/ReflexEngine-${{ steps.version.outputs.VERSION }}.tar.gz
            release/ReflexEngine-${{ steps.version.outputs.VERSION }}.zip