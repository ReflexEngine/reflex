name: Build ReflexEngine

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      specific_distro:
        description: 'Build only a specific distribution (leave empty for all)'
        required: false
        default: ''

jobs:
  build-linux-distros:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro: [debian, arch, alpine]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies for ${{ matrix.distro }}
        run: |
          if [[ "${{ matrix.distro }}" == "debian" ]]; then
            sudo apt-get update
            sudo apt-get install -y liblua5.4-dev
          elif [[ "${{ matrix.distro }}" == "arch" ]]; then
            # Simulate Arch dependencies on Ubuntu
            sudo apt-get update
            sudo apt-get install -y liblua5.1-0-dev
            sudo ln -sf /usr/include/lua5.1 /usr/include/lua
          elif [[ "${{ matrix.distro }}" == "alpine" ]]; then
            # Simulate Alpine dependencies on Ubuntu
            sudo apt-get update
            sudo apt-get install -y liblua5.4-dev
          fi
      
      - name: Build for ${{ matrix.distro }}
        run: make ${{ matrix.distro }}
        if: ${{ github.event.inputs.specific_distro == '' || github.event.inputs.specific_distro == matrix.distro }}
      
      - name: Upload ${{ matrix.distro }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: reflex-${{ matrix.distro }}
          path: binout/reflex
        if: ${{ github.event.inputs.specific_distro == '' || github.event.inputs.specific_distro == matrix.distro }}

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          brew install lua
      
      - name: Build for macOS
        run: make macos
        if: ${{ github.event.inputs.specific_distro == '' || github.event.inputs.specific_distro == 'macos' }}
      
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: reflex-macos
          path: binout/reflex
        if: ${{ github.event.inputs.specific_distro == '' || github.event.inputs.specific_distro == 'macos' }}

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [mingw]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup MinGW
        uses: egor-tensin/setup-mingw@v2
        if: ${{ matrix.build_type == 'mingw' }}

      - name: Install dependencies for MinGW
        if: ${{ matrix.build_type == 'mingw' }}
        shell: bash
        run: |
          pacman -S lua
      
      - name: Build for ${{ matrix.build_type }}
        shell: bash
        run: make ${{ matrix.build_type }}
        if: ${{ github.event.inputs.specific_distro == '' || github.event.inputs.specific_distro == matrix.build_type }}
      
      - name: Upload ${{ matrix.build_type }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: reflex-${{ matrix.build_type }}
          path: binout/reflex.exe
        if: ${{ github.event.inputs.specific_distro == '' || github.event.inputs.specific_distro == matrix.build_type }}

  create-release-archive:
    needs: [build-linux-distros, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      
      - name: Create version number
        id: version
        run: |
          echo "VERSION=$(date +'%Y.%m.%d')_$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist
      
      - name: Create distribution structure
        run: |
          mkdir -p release/ReflexEngine-${{ steps.version.outputs.VERSION }}
          cp -r ./README.md ./LICENSE ./src release/ReflexEngine-${{ steps.version.outputs.VERSION }}/
          mkdir -p release/ReflexEngine-${{ steps.version.outputs.VERSION }}/bin
          
          cp ./dist/reflex-debian/reflex release/ReflexEngine-${{ steps.version.outputs.VERSION }}/bin/reflex-debian
          cp ./dist/reflex-arch/reflex release/ReflexEngine-${{ steps.version.outputs.VERSION }}/bin/reflex-arch
          cp ./dist/reflex-alpine/reflex release/ReflexEngine-${{ steps.version.outputs.VERSION }}/bin/reflex-alpine
          cp ./dist/reflex-macos/reflex release/ReflexEngine-${{ steps.version.outputs.VERSION }}/bin/reflex-macos
          cp ./dist/reflex-windows/reflex.exe release/ReflexEngine-${{ steps.version.outputs.VERSION }}/bin/reflex-windows.exe
          cp ./dist/reflex-mingw/reflex.exe release/ReflexEngine-${{ steps.version.outputs.VERSION }}/bin/reflex-mingw.exe
          
          cd release && tar -czvf ReflexEngine-${{ steps.version.outputs.VERSION }}.tar.gz ReflexEngine-${{ steps.version.outputs.VERSION }}
          cd release && zip -r ReflexEngine-${{ steps.version.outputs.VERSION }}.zip ReflexEngine-${{ steps.version.outputs.VERSION }}
      
      - name: Upload release archive
        uses: actions/upload-artifact@v4
        with:
          name: ReflexEngine-${{ steps.version.outputs.VERSION }}
          path: |
            release/ReflexEngine-${{ steps.version.outputs.VERSION }}.tar.gz
            release/ReflexEngine-${{ steps.version.outputs.VERSION }}.zip