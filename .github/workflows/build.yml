name: Build ReflexEngine

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      specific_distro:
        description: 'Build only a specific distribution (leave empty for all)'
        required: false
        default: ''

jobs:
  build-linux-distros:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro: [debian, arch, alpine]
    steps:
      - uses: actions/checkout@v4
      
      - name: Debug build information
        run: |
          echo "Building for ${{ matrix.distro }}"
          echo "Specific distro parameter: '${{ github.event.inputs.specific_distro }}'"
      
      - name: Install dependencies for ${{ matrix.distro }}
        run: |
          if [[ "${{ matrix.distro }}" == "debian" ]]; then
            sudo apt-get update
            sudo apt-get install -y liblua5.4-dev libuv1-dev
          elif [[ "${{ matrix.distro }}" == "arch" ]]; then
            # Simulate Arch dependencies on Ubuntu
            sudo apt-get update
            sudo apt-get install -y liblua5.1-0-dev libuv1-dev
            sudo ln -sf /usr/include/lua5.1 /usr/include/lua
          elif [[ "${{ matrix.distro }}" == "alpine" ]]; then
            # Ensure both Lua and libuv are installed for Alpine
            sudo apt-get update
            sudo apt-get install -y liblua5.4-dev libuv1-dev
          fi
      
      - name: Build for ${{ matrix.distro }}
        run: make ${{ matrix.distro }}
        if: ${{ github.event.inputs.specific_distro == '' || github.event.inputs.specific_distro == matrix.distro }}
      
      - name: Upload ${{ matrix.distro }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: reflex-${{ matrix.distro }}
          path: binout/reflex-${{ matrix.distro }}
        if: ${{ github.event.inputs.specific_distro == '' || github.event.inputs.specific_distro == matrix.distro }}

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          brew install lua libuv
          # Set environment variables to help find the headers
          echo "CPATH=$(brew --prefix lua)/include:$(brew --prefix libuv)/include" >> $GITHUB_ENV
          # Verify installations
          brew list lua
          brew list libuv
          ls -la $(brew --prefix lua)/include
          ls -la $(brew --prefix libuv)/include
      
      - name: Build for macOS
        run: make macos
        if: ${{ github.event.inputs.specific_distro == '' || github.event.inputs.specific_distro == 'macos' }}
        env:
          CPATH: ${{ env.CPATH }}
      
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: reflex-macos
          path: binout/reflex-macos
        if: ${{ github.event.inputs.specific_distro == '' || github.event.inputs.specific_distro == 'macos' }}

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [mingw]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup MinGW
        uses: egor-tensin/setup-mingw@v2
        if: ${{ matrix.build_type == 'mingw' }}

      - name: Install dependencies for MinGW
        if: ${{ matrix.build_type == 'mingw' }}
        run: |
          # Install Lua and MSYS2 for required libraries
          choco install lua
          choco install msys2
          
          # Install required libraries via MSYS2
          C:\tools\msys64\usr\bin\bash -lc "pacman -S --noconfirm mingw-w64-x86_64-lua mingw-w64-x86_64-libuv mingw-w64-x86_64-gcc"
          
          # Create necessary links and directories
          mkdir -p /mingw64/include
          mkdir -p /mingw64/lib
          
          # Link lua headers if needed
          if [ ! -d "/mingw64/include/lua" ]; then
            ln -sf "C:/tools/msys64/mingw64/include/lua5.1" /mingw64/include/lua
          fi
          
          # Add MSYS2 paths to the environment
          echo "C:/tools/msys64/mingw64/bin" >> $GITHUB_PATH
          echo "C:/tools/msys64/usr/bin" >> $GITHUB_PATH
        shell: bash
      
      - name: Build for ${{ matrix.build_type }}
        run: |
          # Debug information
          echo "PATH: $PATH"
          ls -la /mingw64/include || echo "Directory not found"
          
          # Run the build
          make ${{ matrix.build_type }}
        if: ${{ github.event.inputs.specific_distro == '' || github.event.inputs.specific_distro == matrix.build_type }}
        shell: bash
      
      - name: Upload ${{ matrix.build_type }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: reflex-${{ matrix.build_type }}
          path: binout/reflex-mingw.exe
        if: ${{ github.event.inputs.specific_distro == '' || github.event.inputs.specific_distro == matrix.build_type }}

  create-release-archive:
    needs: [build-linux-distros, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      
      - name: Create version number
        id: version
        run: |
          echo "VERSION=$(date +'%Y.%m.%d')_$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist
      
      - name: Create distribution structure
        run: |
          mkdir -p release/ReflexEngine-${{ steps.version.outputs.VERSION }}
          cp -r ./README.md ./LICENSE ./src release/ReflexEngine-${{ steps.version.outputs.VERSION }}/
          mkdir -p release/ReflexEngine-${{ steps.version.outputs.VERSION }}/bin
          
          # Debug artifact structure
          find ./dist -type f | sort
          
          # Copy binaries using correct path patterns from the Makefile
          cp ./dist/reflex-debian/reflex-debian release/ReflexEngine-${{ steps.version.outputs.VERSION }}/bin/reflex-debian || echo "Warning: debian build not found"
          cp ./dist/reflex-arch/reflex-arch release/ReflexEngine-${{ steps.version.outputs.VERSION }}/bin/reflex-arch || echo "Warning: arch build not found"
          cp ./dist/reflex-alpine/reflex-alpine release/ReflexEngine-${{ steps.version.outputs.VERSION }}/bin/reflex-alpine || echo "Warning: alpine build not found"
          cp ./dist/reflex-macos/reflex-macos release/ReflexEngine-${{ steps.version.outputs.VERSION }}/bin/reflex-macos || echo "Warning: macos build not found"
          cp ./dist/reflex-mingw/reflex-mingw.exe release/ReflexEngine-${{ steps.version.outputs.VERSION }}/bin/reflex-mingw.exe || echo "Warning: mingw build not found"
          
          # Create archive files
          cd release && tar -czvf ReflexEngine-${{ steps.version.outputs.VERSION }}.tar.gz ReflexEngine-${{ steps.version.outputs.VERSION }}
          cd release && zip -r ReflexEngine-${{ steps.version.outputs.VERSION }}.zip ReflexEngine-${{ steps.version.outputs.VERSION }}
      
      - name: Upload release archive
        uses: actions/upload-artifact@v4
        with:
          name: ReflexEngine-${{ steps.version.outputs.VERSION }}
          path: |
            release/ReflexEngine-${{ steps.version.outputs.VERSION }}.tar.gz
            release/ReflexEngine-${{ steps.version.outputs.VERSION }}.zip